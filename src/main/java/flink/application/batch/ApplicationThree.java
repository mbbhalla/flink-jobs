/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package flink.application.batch;

import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.apache.flink.api.common.functions.GroupReduceFunction;
import org.apache.flink.api.java.ExecutionEnvironment;
import org.apache.flink.util.Collector;

import com.google.common.io.Resources;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.ToString;
import lombok.val;

/*
 * Average rating for each genre
 */
public class ApplicationThree {
    
    @Getter
    @AllArgsConstructor
    @ToString
    static class MoviePOJO {
        private Long movieId;
        private String title;
        private String genre;
    }

    @Getter
    @AllArgsConstructor
    @ToString
    static class RatingPOJO {
        private Long movieId;
        private Double rating;
    }

    @Getter
    @AllArgsConstructor
    @ToString
    static class MovieRatingPOJO {
        private String title;
        private String genre;
        private Double rating;
    }

    @Getter
    @AllArgsConstructor
    @ToString
    static class GenreRatingPOJO {
        private String genre;
        private Double rating;
    }
    
    @SuppressWarnings("serial")
    public static void main(String[] args) throws Exception {
        
        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
        
        val movies = env.readCsvFile(Resources.getResource("movielens/movies.csv").getPath())
            .ignoreFirstLine()
            .ignoreInvalidLines()
            .parseQuotedStrings('"')
            .includeFields(true, true, true)
            .types(Long.class, String.class, String.class)
            .map(tuple -> new MoviePOJO(tuple.f0, tuple.f1, tuple.f2));
        
        val ratings = env.readCsvFile(Resources.getResource("movielens/ratings.csv").getPath())
            .ignoreFirstLine()
            .ignoreInvalidLines()
            .includeFields(false, true, true, false)
            .types(Long.class, Double.class)
            .map(tuple -> new RatingPOJO(tuple.f0, tuple.f1));
            
        movies.join(ratings)
            .where(moviePojo -> moviePojo.getMovieId())
            .equalTo(ratingPOJO -> ratingPOJO.getMovieId())
            .with((moviePOJO, ratingPOJO) -> {
               return new MovieRatingPOJO(
                   moviePOJO.getTitle(), 
                   moviePOJO.getGenre().split("\\|")[0],
                   ratingPOJO.getRating()
               );
            })
            .groupBy(movieRatingPOJO -> movieRatingPOJO.genre)
            .reduceGroup(
                new GroupReduceFunction<ApplicationThree.MovieRatingPOJO, GenreRatingPOJO>() {
                    public void reduce(Iterable<MovieRatingPOJO> iterable, Collector<GenreRatingPOJO> collector) throws Exception {
                        
                        val list = StreamSupport.stream(iterable.spliterator(), true)
                            .collect(Collectors.toList());
                        
                        val genre = Optional.ofNullable(list.get(0))
                            .map(mrp -> mrp.getGenre());
                            
                        val avgRating = list.parallelStream()
                            .mapToDouble(mr -> mr.getRating())
                            .average();

                        collector.collect(new GenreRatingPOJO(
                            genre.orElse("OTHER"),
                            avgRating.orElse(0.0))
                        );
                    }
                }
            )
            .print();
    }
}
